buildscript {
    repositories {
        maven {
            url './offline-repository'
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.4.4")
    }
}

subprojects { subProject ->
    apply plugin: 'java'

    compileJava {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    group 'org.example'
    version '1.0-SNAPSHOT'

    repositories {
        maven {
            url '../offline-repository'
        }
    }

    if (subProject.name != 'common') {
        configurations {
            providedRuntime
            cucumberRuntime {
                extendsFrom testImplementation
            }
        }

        dependencies {
            implementation project(':common')
            testAnnotationProcessor('org.projectlombok:lombok:1.18.4')
        }

//    Fix long file name issue in windows
        task buildCucumberManiest(type: Jar) {
            dependsOn configurations.cucumberRuntime
            appendix = 'pathing'
            doFirst {
                manifest {
                    attributes "Class-Path": configurations.cucumberRuntime.files.collect {
                        it.toURL().toString().replaceFirst(/file:\/+/, '/')
                    }.join(' ')
                }
            }
        }

        task cucumber(type: JavaExec) {
            dependsOn assemble, testClasses, buildCucumberManiest
            main = "io.cucumber.core.cli.Main"
            classpath = sourceSets.main.output + sourceSets.test.output + files(buildCucumberManiest.archivePath)
            jvmArgs "-Dfile.encoding=UTF-8"
            args = ['--plugin', 'pretty',
                    '--glue', 'com.naura.test',
                    '--glue', 'com.github.leeonky',
                    '--tags', 'not @skip',
//                    '--dry-run',
                    'src/test/resources']
        }

        tasks.withType(JavaCompile) {
            options.encoding = 'UTF-8'
        }

        tasks.withType(Test) {
            systemProperty("file.encoding", "UTF-8")
        }

        tasks.withType(Javadoc) {
            options.encoding = 'UTF-8'
        }
    }
}
